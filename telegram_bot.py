import telebot
import logging
import time
import os
import traceback
from datetime import datetime

# Import zdieƒæan√Ωch komponentov
from shared_components import (
    GlassPanel, CuttingOptimizer, GlassCalculator, 
    parse_dimensions, validate_dimensions, initialize_database,
    logger, Base, engine, Session, GlassCategory, Glass, Calculation
)

# Konfigur√°cia pre Telegram bota
TOKEN = '7410948566:AAGkfgV9AD3Rt9EfTXrIvMHyhULgAR7Y21Q'  # Nahraƒète svoj√≠m tokenom
STOCK_WIDTH = 321
STOCK_HEIGHT = 225

class GlassCuttingBot:
    def __init__(self, token: str):
        logger.info('Inicializ√°cia GlassCuttingBot')
        self.bot = telebot.TeleBot(token)
        self.user_dimensions = {}
        self.optimizer = None
        self.user_states = {}
        self.calculator = GlassCalculator(Session(), self.user_states)
        
        try:
            self.bot.remove_webhook()
            time.sleep(0.5)
            logger.info('Webhook √∫spe≈°ne odstr√°nen√Ω')
        except Exception as e:
            logger.warning(f'Chyba pri odstra≈àovan√≠ webhoku: {e}')
            
        self.STATES = {
            'WAITING_FOR_DIMENSIONS': 1,
            'WAITING_FOR_GLASS_TYPE': 2,
            'WAITING_FOR_CONFIRMATION': 3
        }
        
        self.setup_handlers()
        logger.info('GlassCuttingBot inicializovan√Ω')

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            btn1 = telebot.types.KeyboardButton('321 x 225 cm')
            btn2 = telebot.types.KeyboardButton('160.5 x 255 cm')
            btn3 = telebot.types.KeyboardButton('Vlastn√© rozmery')
            markup.add(btn1, btn2, btn3)
            
            welcome_text = (
                "Vitajte v optimaliz√°tore rezania a kalkul√°tore cien skla!\n\n"
                "Dostupn√© pr√≠kazy:\n"
                "/start - Spust√≠ nov√Ω v√Ωpoƒçet\n"
                "/help - Zobraz√≠ n√°vod na pou≈æitie\n"
                "/history - Zobraz√≠ hist√≥riu kalkul√°ci√≠\n"
                "/clear_history - Vyma≈æe hist√≥riu kalkul√°ci√≠\n\n"
                "Najprv si pros√≠m vyberte rozmer tabule:"
            )
            self.bot.reply_to(message, welcome_text, reply_markup=markup)

        @self.bot.message_handler(func=lambda message: message.text in ['321 x 225 cm', '160.5 x 255 cm', 'Vlastn√© rozmery'])
        def handle_dimension_choice(message):
            if message.text == '321 x 225 cm':
                width, height = 321, 225
                self.setup_optimizer(message.chat.id, width, height)
            elif message.text == '160.5 x 255 cm':
                width, height = 160.5, 255
                self.setup_optimizer(message.chat.id, width, height)
            else:  # Vlastn√© rozmery
                self.bot.reply_to(
                    message, 
                    "Zadajte rozmery tabule v centimetroch v form√°te: ≈°√≠rka x v√Ω≈°ka\n"
                    "Napr√≠klad: 200x150"
                )
                self.user_states[message.chat.id] = 'waiting_for_custom_dimensions'

        @self.bot.message_handler(func=lambda message: 
            message.chat.id in self.user_states and 
            self.user_states[message.chat.id] == 'waiting_for_custom_dimensions')
        def handle_custom_dimensions(message):
            try:
                # Parsovanie rozmerov
                dimensions = message.text.replace(',', '.').replace(' ', '')
                match = re.match(r'(\d+\.?\d*)x(\d+\.?\d*)', dimensions.lower())
                
                if not match:
                    self.bot.reply_to(
                        message, 
                        "‚ùå Nespr√°vny form√°t! Zadajte rozmery v form√°te: ≈°√≠rka x v√Ω≈°ka\n"
                        "Napr√≠klad: 200x150"
                    )
                    return
                    
                width, height = map(float, match.groups())
                
                # Kontrola rozmerov
                if width <= 0 or height <= 0:
                    self.bot.reply_to(message, "‚ùå Rozmery musia by≈• v√§ƒç≈°ie ako 0!")
                    return
                    
                if width > 1000 or height > 1000:
                    self.bot.reply_to(message, "‚ùå Rozmery s√∫ pr√≠li≈° veƒæk√©! Maximum je 1000x1000 cm")
                    return
                
                # Nastavenie optimiz√©ra s vlastn√Ωmi rozmermi
                self.setup_optimizer(message.chat.id, width, height)
                
            except Exception as e:
                self.bot.reply_to(message, "‚ùå Nastala chyba pri spracovan√≠ rozmerov. Sk√∫ste znova.")
                logger.error(f"Chyba pri spracovan√≠ vlastn√Ωch rozmerov: {str(e)}")

        def setup_optimizer(self, chat_id: int, width: float, height: float):
            """Pomocn√° met√≥da pre nastavenie optimiz√©ra"""
            self.user_dimensions[chat_id] = (width, height)
            self.optimizer = CuttingOptimizer(width, height)
            
            response_text = (
                f"‚úÖ Vybrali ste rozmer: {width}x{height} cm\n\n"
                "Teraz zadajte rozmery skiel v jednom z form√°tov:\n"
                "1Ô∏è‚É£ Jeden rozmer: 100x50 alebo 83.5x92.2\n"
                "2Ô∏è‚É£ Viac rozmerov naraz: 100x50-200x30-80.5x90.2\n"
            )
            self.bot.reply_to(message, response_text)
            self.user_states[chat_id] = self.STATES['WAITING_FOR_DIMENSIONS']

        @self.bot.message_handler(func=lambda message: 
            message.chat.id in self.user_states and 
            self.user_states[message.chat.id] == self.STATES['WAITING_FOR_DIMENSIONS'])
        def handle_glass_dimensions(message):
            try:
                dimensions = self.parse_dimensions(message.text)
                if not dimensions:
                    self.bot.reply_to(message, "‚ùå Nespr√°vny form√°t rozmerov!")
                    return

                panels = []
                for width, height in dimensions:
                    if self.validate_dimensions(width, height, message.chat.id):
                        panels.append(GlassPanel(width, height, 4.0))

                if not panels:
                    self.bot.reply_to(message, "‚ùå ≈Ωiadne platn√© rozmery!")
                    return

                # V√Ωpoƒçet optim√°lneho rozlo≈æenia
                processing_msg = self.bot.reply_to(message, "üîÑ Prebieha v√Ωpoƒçet optim√°lneho rozlo≈æenia...")
                
                all_layouts = self.optimizer.optimize_multiple_sheets(panels)
                if not all_layouts:
                    self.bot.reply_to(message, "‚ùå Nepodarilo sa n√°js≈• vhodn√© rozlo≈æenie.")
                    return

                # V√Ωpoƒçet total_waste pred jeho pou≈æit√≠m
                total_waste = 0
                for sheet_index, (layout, waste) in enumerate(all_layouts, 1):
                    img_buf = self.optimizer.visualize(layout)
                    sheet_area = sum(width * height / 10000 for _, _, width, height, _ in layout)
                    waste_area = self.optimizer.calculate_waste_area(sheet_area)

                    caption = (
                        f"üìã Tabula #{sheet_index}\n"
                        f"üìè Plocha skiel: {sheet_area:.2f} m¬≤\n"
                        f"üóëÔ∏è Odpad: {waste_area:.2f} m¬≤\n"
                        f"üìä Vyu≈æitie: {100-waste:.1f}%"
                    )
                    
                    self.bot.send_photo(message.chat.id, img_buf, caption=caption)
                    total_waste += waste

                # Ulo≈æenie v√Ωsledkov pre neskor≈°ie pou≈æitie
                self.user_states[message.chat.id] = {
                    'layouts': all_layouts,
                    'total_area': sum(panel.width * panel.height / 10000 for panel in panels),
                    'panels': panels,
                    'total_waste': total_waste
                }

                # V√Ωpoƒçet priemern√©ho odpadu
                if len(all_layouts) > 0:
                    average_waste = total_waste/len(all_layouts)
                else:
                    average_waste = 0

                # Zobrazenie s√∫hrnn√Ωch inform√°ci√≠ s tlaƒçidlami
                markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
                btn_yes = telebot.types.KeyboardButton('√Åno')
                btn_no = telebot.types.KeyboardButton('Nie') 
                markup.add(btn_yes, btn_no)

                summary = (
                    f"üìä Celkov√Ω s√∫hrn:\n"
                    f"üì¶ Poƒçet tab√∫ƒæ: {len(all_layouts)}\n"
                    f"üìè Celkov√° plocha skiel: {self.user_states[message.chat.id]['total_area']:.2f} m¬≤\n"
                    f"üóëÔ∏è Priemern√Ω odpad: {average_waste:.1f}%\n\n"
                    "Chcete pokraƒçova≈• s v√Ωpoƒçtom ceny?"
                )
                
                # Ulo≈æ√≠me stav pred odoslan√≠m spr√°vy
                self.user_states[message.chat.id] = {
                    'layouts': all_layouts,
                    'total_area': self.user_states[message.chat.id]['total_area'],
                    'panels': panels,
                    'total_waste': total_waste,
                    'state': self.STATES['WAITING_FOR_GLASS_TYPE']
                }
                
                self.bot.reply_to(message, summary, reply_markup=markup)

            except Exception as e:
                logger.error(f"Chyba pri spracovan√≠ rozmerov: {str(e)}", exc_info=True)
                self.bot.reply_to(message, f"‚ùå Nastala chyba: {str(e)}")

        @self.bot.message_handler(func=lambda message: 
            message.chat.id in self.user_states and 
            isinstance(self.user_states[message.chat.id], dict) and
            self.user_states[message.chat.id].get('state') == self.STATES['WAITING_FOR_GLASS_TYPE'] and
            message.text == '√Åno')
        def handle_glass_type_selection(message):
            try:
                logger.info(f"Spracov√°vam odpoveƒè √Åno od u≈æ√≠vateƒæa {message.chat.id}")
                # Z√≠skanie kateg√≥ri√≠ skla z datab√°zy
                session = Session()
                categories = session.query(GlassCategory).all()
                
                if not categories:
                    self.bot.reply_to(message, "‚ùå V datab√°ze nie s√∫ ≈æiadne kateg√≥rie skla.")
                    return
                
                markup = telebot.types.InlineKeyboardMarkup()
                for category in categories:
                    callback_data = f"cat_{category.id}"
                    logger.info(f"Prid√°vam kateg√≥riu: {category.name} s callback_data: {callback_data}")
                    markup.add(telebot.types.InlineKeyboardButton(
                        category.name,
                        callback_data=callback_data
                    ))
                
                # Odstr√°nime kl√°vesnicu s √Åno/Nie
                remove_markup = telebot.types.ReplyKeyboardRemove()
                
                self.bot.reply_to(
                    message,
                    "Vyberte kateg√≥riu skla:",
                    reply_markup=markup
                )
                
                # Aktualizujeme stav
                self.user_states[message.chat.id]['state'] = 'selecting_category'
                
            except Exception as e:
                logger.error(f"Chyba pri v√Ωbere kateg√≥rie skla: {str(e)}", exc_info=True)
                self.bot.reply_to(message, "‚ùå Nastala chyba pri v√Ωbere kateg√≥rie skla")
            finally:
                session.close()

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
        def handle_category_selection(call):
            category_id = int(call.data.split('_')[1])
            
            session = Session()
            glasses = session.query(Glass).filter_by(category_id=category_id).all()
            
            markup = telebot.types.InlineKeyboardMarkup()
            for glass in glasses:
                markup.add(telebot.types.InlineKeyboardButton(
                    f"{glass.name} ({glass.price_per_m2}‚Ç¨/m¬≤)",
                    callback_data=f"glass_{glass.id}"
                ))
            
            self.bot.edit_message_text(
                "Vyberte typ skla:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('glass_'))
        def handle_glass_selection(call):
            try:
                session = Session()
                glass_id = int(call.data.split('_')[1])
                chat_id = call.message.chat.id
                
                logger.info(f"Spracov√°vam v√Ωber skla: glass_id={glass_id}, chat_id={chat_id}")
                
                if chat_id not in self.user_states:
                    logger.error(f"Chat ID {chat_id} nem√° ulo≈æen√Ω stav")
                    self.bot.answer_callback_query(call.id, "‚ùå Chyba: Zaƒçnite znova pr√≠kazom /start")
                    return

                if not isinstance(self.user_states[chat_id], dict):
                    logger.error(f"Nespr√°vny form√°t user_states pre chat_id {chat_id}")
                    self.bot.answer_callback_query(call.id, "‚ùå Chyba: Zaƒçnite znova pr√≠kazom /start")
                    return

                if 'total_area' not in self.user_states[chat_id]:
                    logger.error(f"Ch√Ωba total_area pre chat_id {chat_id}")
                    self.bot.answer_callback_query(call.id, "‚ùå Chyba: Zaƒçnite znova pr√≠kazom /start")
                    return

                # V√Ωpoƒçet ceny
                total_area = self.user_states[chat_id]['total_area']
                logger.info(f"Poƒç√≠tam cenu pre plochu {total_area}m¬≤")
                
                glass = session.query(Glass).get(glass_id)
                if not glass:
                    logger.error(f"Sklo s ID {glass_id} nebolo n√°jden√©")
                    self.bot.answer_callback_query(call.id, "‚ùå Chyba: Sklo nebolo n√°jden√©")
                    return

                price_calculation = self.calculator.get_glass_price(glass_id, total_area * 1000, 1000, chat_id)
                
                summary = (
                    f"üí∞ Cenov√° kalkul√°cia:\n\n"
                    f"Typ skla: {price_calculation['glass_name']}\n"
                    f"Plocha skiel: {price_calculation['area']:.2f} m¬≤ = {price_calculation['area_price']}‚Ç¨\n"
                    f"Plocha odpadu: {price_calculation['waste_area']:.2f} m¬≤ = {price_calculation['waste_price']}‚Ç¨\n"
                    f"Celkov√° cena: {price_calculation['total_price']}‚Ç¨\n"
                )
                
                logger.info(f"Odosielam cenov√∫ kalkul√°ciu pre chat_id {chat_id}")
                
                # Najprv potvrƒète callback query
                self.bot.answer_callback_query(call.id)
                
                # Potom upravte spr√°vu
                self.bot.edit_message_text(
                    summary,
                    chat_id,
                    call.message.message_id
                )
                
                # Prid√°me tlaƒçidlo na generovanie PDF
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(
                    "üìÑ Generova≈• PDF",
                    callback_data=f"pdf_{glass_id}"
                ))
                
                self.bot.send_message(
                    chat_id,
                    "Chcete vygenerova≈• PDF s v√Ωkresom a cenovou kalkul√°ciou?",
                    reply_markup=markup
                )
                
                # Ulo≈æenie kalkul√°cie do datab√°zy
                try:
                    calculation = Calculation(
                        user_id=chat_id,
                        glass_id=glass_id,
                        width=total_area * 100,  # konverzia na cm¬≤
                        height=100,
                        area=total_area,
                        waste_area=total_area * (self.user_states[chat_id].get('total_waste', 0) / 100),
                        total_price=price_calculation['total_price']
                    )
                    session.add(calculation)
                    session.commit()
                    logger.info(f"Kalkul√°cia ulo≈æen√° do datab√°zy pre chat_id {chat_id}")
                except Exception as e:
                    logger.error(f"Chyba pri ukladan√≠ kalkul√°cie: {str(e)}")
                    session.rollback()
                
            except Exception as e:
                logger.error(f"Kritick√° chyba pri spracovan√≠ v√Ωberu skla: {str(e)}", exc_info=True)
                try:
                    self.bot.answer_callback_query(call.id, "‚ùå Nastala chyba pri v√Ωpoƒçte")
                    self.bot.send_message(chat_id, "‚ùå Nastala chyba. Pros√≠m, zaƒçnite znova pr√≠kazom /start")
                except:
                    pass
            finally:
                session.close()

        @self.bot.message_handler(func=lambda message: 
            message.chat.id in self.user_states and 
            self.user_states[message.chat.id] == self.STATES['WAITING_FOR_GLASS_TYPE'] and
            message.text in ['Nie'])
        def handle_no_price_calculation(message):
            self.user_states[message.chat.id] = self.STATES['WAITING_FOR_DIMENSIONS']
            markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            btn1 = telebot.types.KeyboardButton('321 x 225 cm')
            btn2 = telebot.types.KeyboardButton('160.5 x 255 cm')
            btn3 = telebot.types.KeyboardButton('Vlastn√© rozmery')
            markup.add(btn1, btn2, btn3)
            self.bot.reply_to(
                message,
                "‚úÖ V poriadku. Pre nov√∫ kalkul√°ciu vyberte rozmer tabule:",
                reply_markup=markup
            )

        @self.bot.message_handler(commands=['help'])
        def help(message):
            help_text = (
                "üìã N√°vod na pou≈æitie:\n\n"
                "1‚É£ /start - Spust√≠ nov√Ω v√Ωpoƒçet\n"
                "2Ô∏è Vyberte rozmer tabule\n"
                "3Ô∏è‚É£ Zadajte rozmery skiel:\n"
                "   ‚Ä¢ Jeden rozmer: 100x50\n"
                "   ‚Ä¢ Viac rozmerov: 100x50-200x30\n"
                "4Ô∏è‚É£ Potvrƒète v√Ωpoƒçet ceny\n"
                "5Ô∏è‚É£ Vyberte typ skla\n\n"
                "ƒéal≈°ie pr√≠kazy:\n"
                "/history - Zobraz√≠ hist√≥riu kalkul√°ci√≠\n"
                "/clear_history - Vymaze hist√≥riu kalkul√°ci√≠\n\n"
                "‚ùì Pre ƒèal≈°iu pomoc kontaktujte administr√°tora"
            )
            self.bot.reply_to(message, help_text)

        @self.bot.message_handler(commands=['clear_history'])
        def clear_history(message):
            try:
                session = Session()
                session.query(Calculation).filter_by(user_id=message.chat.id).delete()
                session.commit()
                self.bot.reply_to(message, "‚úÖ Hist√≥ria kalkul√°ci√≠ bola vymazan√°")
            except Exception as e:
                logger.error(f"Chyba pri mazan√≠ hist√≥rie: {str(e)}")
                self.bot.reply_to(message, "‚ùå Nastala chyba pri mazan√≠ hist√≥rie")

        @self.bot.message_handler(commands=['history'])
        def show_history(message):
            try:
                session = Session()
                calculations = session.query(Calculation).filter_by(user_id=message.chat.id).order_by(Calculation.created_at.desc()).limit(5).all()
                
                if not calculations:
                    self.bot.reply_to(message, "Zatiaƒæ nem√°te ≈æiadne kalkul√°cie")
                    return
                    
                history_text = "üìã Posledn√Ωch 5 kalkul√°ci√≠:\n\n"
                for calc in calculations:
                    glass = session.query(Glass).get(calc.glass_id)
                    history_text += (
                        f"üïí {calc.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üìè Plocha: {calc.area:.2f} m¬≤\n"
                        f"üóëÔ∏è Odpad: {calc.waste_area:.2f} m¬≤\n"
                        f"üí∞ Cena: {calc.total_price}‚Ç¨\n"
                        f"ü™ü Typ: {glass.name}\n\n"
                    )
                    
                self.bot.reply_to(message, history_text)
            except Exception as e:
                logger.error(f"Chyba pri zobrazen√≠ hist√≥rie: {str(e)}")
                self.bot.reply_to(message, "‚ùå Nastala chyba pri naƒç√≠tan√≠ hist√≥rie")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('pdf_'))
        def handle_pdf_generation(call):
            # Implement√°cia v bud√∫cnosti
            self.bot.answer_callback_query(call.id, "PDF generovanie je moment√°lne v pr√≠prave.")

    def parse_dimensions(self, text: str) -> List[Tuple[float, float]]:
        return parse_dimensions(text)

    def validate_dimensions(self, width: float, height: float, chat_id: int) -> bool:
        stock_width, stock_height = self.user_dimensions.get(chat_id, (STOCK_WIDTH, STOCK_HEIGHT))
        return validate_dimensions(width, height, stock_width, stock_height)

    def run(self):
        """Spustenie bota."""
        try:
            print("Bot bol spusten√Ω! Stlaƒçte Ctrl+C pre ukonƒçenie.")
            self.bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            logger.error(f"Chyba pri behu bota: {str(e)}", exc_info=True)
            raise e

if __name__ == "__main__":
    try:
        # Inicializ√°cia datab√°zy
        initialize_database()
        
        print("=== Optimaliz√°tor rezania a kalkul√°tor cien skla - Telegram Bot ===")
        print("Inicializujem syst√©m...")
        
        # Spustenie bota
        cutting_bot = GlassCuttingBot(TOKEN)
        
        print("\nBot je √∫spe≈°ne spusten√Ω a ƒçak√° na spr√°vy!")
        print("Pre ukonƒçenie stlaƒçte Ctrl+C\n")
        
        cutting_bot.run()
    except KeyboardInterrupt:
        print("\nUkonƒçujem bota...")
    except Exception as e:
        logger.critical(f"Kritick√° chyba: {str(e)}", exc_info=True)
        print(f"\nNastala chyba: {str(e)}")
    finally:
        print("\nProgram ukonƒçen√Ω.") 